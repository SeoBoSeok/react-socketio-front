{"version":3,"sources":["components/LoginWrap.js","store/modules/users.js","store/modules/chat.js","containers/LoginWrapContainer.js","components/MessageBody.js","components/Messages.js","components/InputBox.js","containers/ChatWrapContainer.js","App.js","store/modules/index.js","store/configureStore.js","serviceWorker.js","index.js"],"names":["LoginWrap","_ref","set_user","display","status","react_default","a","createElement","className","style","onKeyPress","type","maxLength","dotenv","config","socket","io","actionCreators","set_login","createAction","username","dispatch","emit","initialState","Map","handleActions","_handleActions","Object","defineProperty","state","action","set","payload","add_chat","logs","List","get","push","data","LoginWrapContainer","event","_this$props","_this","props","UserActions","ChatActions","usernameInputValue","target","value","which","concat","components_LoginWrap","this","Component","connect","users","bindActionCreators","chatActionCreators","MessageBody","message","Messages","map","log","key","components_MessageBody","InputBox","placeholder","ChatWrapContainer","inputMessage","_this$props2","on","numUsers","components_Messages","components_InputBox","chat","toJS","App","containers_ChatWrapContainer","containers_LoginWrapContainer","combineReducers","logger","createLogger","Boolean","window","location","hostname","match","store","createStore","modules","compose","applyMiddleware","ReduxThunk","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a202e8a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LoginWrap = ({set_user, status}) => {\n    const display = status ? \"none\" : \"block\"; \n    return (\n        <li className=\"login page\" style={{ \"display\" : display }}>\n            <div className=\"form\">\n                <h3 className=\"title\">닉네임을 입력하세요.</h3>\n                <input className=\"usernameInput\"\n                onKeyPress={set_user}\n                type=\"text\" maxLength=\"14\" />\n            </div>\n        </li>\n    );\n}\n\nLoginWrap.propTypes = {\n    set_user: PropTypes.func.isRequired,\n    status: PropTypes.bool.isRequired\n};\n\n\nexport default LoginWrap;","import { createAction, handleActions } from 'redux-actions';\nimport { Map } from 'immutable';\nimport dotenv from 'dotenv';\n\nimport io from 'socket.io-client';\ndotenv.config();\nconst socket = io('http://13.124.223.234:3000');\n\n\nconst SET_USER = 'users/SET_USER';\nconst SET_LOGIN = 'users/SET_LOGIN';\n\nexport const actionCreators = {\n  set_login: createAction(SET_LOGIN),\n  set_user : createAction(SET_USER),\n};\n\nactionCreators.set_userAsync = (username) => dispatch => {\n  socket.emit('add user', username);\n  dispatch(actionCreators.set_user());\n}\n\nconst initialState = Map({\n    status: false,\n    username : \"\"\n});\n\nexport default handleActions(\n  {\n    [SET_USER]: (state, action) => state.set( 'username' , action.payload ),\n    [SET_LOGIN]: (state) => state.set( 'status' , true )\n  }, \n  initialState\n);","import { createAction, handleActions } from 'redux-actions';\nimport { Map ,List } from 'immutable';\n\nconst ADD_CHAT = 'chat/ADD_CHAT';\n\nexport const actionCreators = {\n  add_chat: createAction(ADD_CHAT)\n};\n\nconst initialState = Map({\n    logs: List([])\n});\n\nexport default handleActions(\n  {\n    [ADD_CHAT]: (state, action) => state.set( 'logs' , state.get('logs').push(Map(\n        { \n            type : action.payload.type,\n            username : action.payload.username,\n            data : action.payload.data\n        }\n    ))),\n  }, \n  initialState\n);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport LoginWrap from '../components/LoginWrap';\nimport { actionCreators } from '../store/modules/users';\nimport { actionCreators as chatActionCreators } from '../store/modules/chat';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\n\nclass LoginWrapContainer extends Component {\n  \n    set_user = (event) => {\n        const { UserActions, ChatActions, socket } = this.props;\n        let usernameInputValue = event.target.value;\n        if( event.which === 13 && usernameInputValue ){\n            socket.emit('add user', usernameInputValue);\n            UserActions.set_user(usernameInputValue);\n            UserActions.set_login();\n            ChatActions.add_chat({\n                type : \"log\",\n                username : usernameInputValue,\n                data : `당신의 닉네임 : ${usernameInputValue}`\n            });\n        }\n    }\n\n\n    render() {\n        return (\n        <LoginWrap\n            set_user={this.set_user}\n            status = {this.props.status}\n        />\n        );\n    }\n}\n\nLoginWrapContainer.propTypes = {\n    socket: PropTypes.object.isRequired\n};\n\nexport default connect(\n    (state) => ({\n        username: state.users.get('username'),\n        status: state.users.get('status'),\n    }),\n    (dispatch) => ({\n        UserActions : bindActionCreators(actionCreators, dispatch),\n        ChatActions : bindActionCreators(chatActionCreators, dispatch)\n    })\n)(LoginWrapContainer);","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst MessageBody = ({username, message}) => {\n    return (\n        <div>\n            <span className=\"username\">{username}</span>\n            <span className=\"messageBody\">{message}</span>\n        </div>\n    );\n}\n\nMessageBody.propTypes = {\n    username: PropTypes.string.isRequired,\n    message: PropTypes.string.isRequired\n};\n\nexport default MessageBody;","import React from 'react';\nimport MessageBody from '../components/MessageBody';\nimport PropTypes from 'prop-types';\n\nconst Messages = ({logs}) => {\n    return (\n        <ul className=\"messages\">\n            {logs.map( (log, key)=>{  \n                return ( \n                    <li className={log.type} key={key} style={{ \"display\": \"list-item\" }}>\n                        { log.type ===\"log\" ? log.data : \n                            <MessageBody\n                            username = {log.username} \n                            message = {log.data}\n                            />  \n                        }\n                    </li>\n                )\n            })}\n        </ul>\n    );\n}\n\nMessages.propTypes = {\n    logs: PropTypes.array.isRequired\n};\n\nexport default Messages;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst InputBox = ({add_chat}) => {\n    return (\n        <input className=\"inputMessage\" \n            placeholder=\"Type here...\" \n            onKeyPress={add_chat} />\n    );\n}\n\nInputBox.propTypes = {\n    add_chat: PropTypes.func.isRequired\n};\n\nexport default InputBox;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { actionCreators } from '../store/modules/chat';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport Messages from '../components/Messages';\nimport InputBox from '../components/InputBox';\n\nclass ChatWrapContainer extends Component {\n\n    componentDidMount() {\n        const { ChatActions, socket } = this.props;\n\n        socket.on('user joined', (data)=>{\n            ChatActions.add_chat({\n                type : \"log\",\n                username : \"notice\",\n                data : `${data.username}님이 접속하였습니다.`\n            });\n        });\n\n        socket.on('new message', (data)=>{\n            ChatActions.add_chat({\n                type : \"message\",\n                username : data.username,\n                data : data.message\n            });\n        });\n\n        socket.on('login', (data)=>{\n            ChatActions.add_chat({\n                type : \"log\",\n                username : \"notice\",\n                data : `현재인원 ( ${data.numUsers} )`\n            });\n        });\n\n        socket.on('user left', (data)=>{\n            ChatActions.add_chat({\n                type : \"log\",\n                username : data.username,\n                data : `${data.username}님이 접속을 종료하였습니다.\n                    현재인원 ( ${data.numUsers} )`\n            });\n        });\n\n        \n    }\n\n    add_chat = (event) => {\n        const { ChatActions, socket, username } = this.props;\n        let inputMessage = event.target.value;\n        if( event.which === 13 && inputMessage ){\n            socket.emit('new message', inputMessage);\n            ChatActions.add_chat({\n                type : \"message\",\n                username : username,\n                data : inputMessage\n            });\n            event.target.value = \"\";\n        }\n    }\n\n    render() {\n        const display = this.props.status ? \"block\" : \"none\"; \n        return (\n            <li className=\"chat page\" style={{ \"display\" : display }}>\n                <div className=\"chatArea\">\n                    <Messages logs={this.props.logs}/>\n                </div>\n                <InputBox add_chat={this.add_chat}/>\n            </li>\n        );\n    }\n}\n\nChatWrapContainer.propTypes = {\n    socket: PropTypes.object.isRequired\n};\n\nexport default connect(\n    (state) => ({\n        username: state.users.get('username'),\n        status: state.users.get('status'),\n        logs: state.chat.get('logs').toJS()\n    }),\n    (dispatch) => ({\n        ChatActions : bindActionCreators(actionCreators, dispatch)\n    })\n)(ChatWrapContainer);","import React, { Component } from 'react';\nimport LoginWrapContainer from './containers/LoginWrapContainer';\nimport ChatWrapContainer from './containers/ChatWrapContainer';\nimport io from 'socket.io-client';\nconst socket = io('http://13.124.223.234:3000');\n\nclass App extends Component {\n  render() {\n    return (\n      <ul className=\"pages\">\n        <ChatWrapContainer socket={ socket } />\n        <LoginWrapContainer socket={ socket } />\n      </ul>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport users from '../../store/modules/users';\nimport chat from '../../store/modules/chat';\n\nexport default combineReducers({\n    users,\n    chat\n});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport modules from '../store/modules';\nimport ReduxThunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\n\nconst logger = createLogger(); \n\nexport default function configureStore() {\n  const store = createStore(\n    modules, /* preloadedState, */\n    compose(\n      applyMiddleware(\n        ReduxThunk,\n        logger\n      ),\n      // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n   );\n  return store;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport configureStore from './store/configureStore';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}