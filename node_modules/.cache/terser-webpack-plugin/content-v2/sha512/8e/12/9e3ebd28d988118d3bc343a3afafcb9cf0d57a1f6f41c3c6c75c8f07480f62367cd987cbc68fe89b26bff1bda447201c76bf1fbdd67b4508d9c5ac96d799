{"map":"{\"version\":3,\"sources\":[\"/Users/boseokseo/Fastcampus/8주차/react-socket.io-front/src/components/LoginWrap.js\",\"/Users/boseokseo/Fastcampus/8주차/react-socket.io-front/src/store/modules/users.js\",\"/Users/boseokseo/Fastcampus/8주차/react-socket.io-front/src/store/modules/chat.js\",\"/Users/boseokseo/Fastcampus/8주차/react-socket.io-front/src/containers/LoginWrapContainer.js\",\"/Users/boseokseo/Fastcampus/8주차/react-socket.io-front/src/components/MessageBody.js\",\"/Users/boseokseo/Fastcampus/8주차/react-socket.io-front/src/components/Messages.js\",\"/Users/boseokseo/Fastcampus/8주차/react-socket.io-front/src/components/InputBox.js\",\"/Users/boseokseo/Fastcampus/8주차/react-socket.io-front/src/containers/ChatWrapContainer.js\",\"/Users/boseokseo/Fastcampus/8주차/react-socket.io-front/src/App.js\",\"/Users/boseokseo/Fastcampus/8주차/react-socket.io-front/src/store/modules/index.js\",\"/Users/boseokseo/Fastcampus/8주차/react-socket.io-front/src/store/configureStore.js\",\"/Users/boseokseo/Fastcampus/8주차/react-socket.io-front/src/serviceWorker.js\",\"/Users/boseokseo/Fastcampus/8주차/react-socket.io-front/src/index.js\"],\"names\":[\"LoginWrap\",\"_ref\",\"set_user\",\"display\",\"status\",\"react_default\",\"a\",\"createElement\",\"className\",\"style\",\"onKeyPress\",\"type\",\"maxLength\",\"dotenv\",\"config\",\"socket\",\"io\",\"actionCreators\",\"set_login\",\"createAction\",\"username\",\"dispatch\",\"emit\",\"initialState\",\"Map\",\"handleActions\",\"_handleActions\",\"Object\",\"defineProperty\",\"state\",\"action\",\"set\",\"payload\",\"add_chat\",\"logs\",\"List\",\"get\",\"push\",\"data\",\"LoginWrapContainer\",\"event\",\"_this$props\",\"_this\",\"props\",\"UserActions\",\"ChatActions\",\"usernameInputValue\",\"target\",\"value\",\"which\",\"concat\",\"components_LoginWrap\",\"this\",\"Component\",\"connect\",\"users\",\"bindActionCreators\",\"chatActionCreators\",\"MessageBody\",\"message\",\"Messages\",\"map\",\"log\",\"key\",\"components_MessageBody\",\"InputBox\",\"placeholder\",\"ChatWrapContainer\",\"inputMessage\",\"_this$props2\",\"on\",\"numUsers\",\"components_Messages\",\"components_InputBox\",\"chat\",\"toJS\",\"App\",\"containers_ChatWrapContainer\",\"containers_LoginWrapContainer\",\"combineReducers\",\"logger\",\"createLogger\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"store\",\"createStore\",\"modules\",\"compose\",\"applyMiddleware\",\"ReduxThunk\",\"ReactDOM\",\"render\",\"es\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nconst LoginWrap = ({set_user, status}) => {\\n    const display = status ? \\\"none\\\" : \\\"block\\\"; \\n    return (\\n        <li className=\\\"login page\\\" style={{ \\\"display\\\" : display }}>\\n            <div className=\\\"form\\\">\\n                <h3 className=\\\"title\\\">닉네임을 입력하세요.</h3>\\n                <input className=\\\"usernameInput\\\"\\n                onKeyPress={set_user}\\n                type=\\\"text\\\" maxLength=\\\"14\\\" />\\n            </div>\\n        </li>\\n    );\\n}\\n\\nLoginWrap.propTypes = {\\n    set_user: PropTypes.func.isRequired,\\n    status: PropTypes.bool.isRequired\\n};\\n\\n\\nexport default LoginWrap;\",\"import { createAction, handleActions } from 'redux-actions';\\nimport { Map } from 'immutable';\\nimport dotenv from 'dotenv';\\n\\nimport io from 'socket.io-client';\\ndotenv.config();\\nconst socket = io('http://13.124.223.234:3000');\\n\\n\\nconst SET_USER = 'users/SET_USER';\\nconst SET_LOGIN = 'users/SET_LOGIN';\\n\\nexport const actionCreators = {\\n  set_login: createAction(SET_LOGIN),\\n  set_user : createAction(SET_USER),\\n};\\n\\nactionCreators.set_userAsync = (username) => dispatch => {\\n  socket.emit('add user', username);\\n  dispatch(actionCreators.set_user());\\n}\\n\\nconst initialState = Map({\\n    status: false,\\n    username : \\\"\\\"\\n});\\n\\nexport default handleActions(\\n  {\\n    [SET_USER]: (state, action) => state.set( 'username' , action.payload ),\\n    [SET_LOGIN]: (state) => state.set( 'status' , true )\\n  }, \\n  initialState\\n);\",\"import { createAction, handleActions } from 'redux-actions';\\nimport { Map ,List } from 'immutable';\\n\\nconst ADD_CHAT = 'chat/ADD_CHAT';\\n\\nexport const actionCreators = {\\n  add_chat: createAction(ADD_CHAT)\\n};\\n\\nconst initialState = Map({\\n    logs: List([])\\n});\\n\\nexport default handleActions(\\n  {\\n    [ADD_CHAT]: (state, action) => state.set( 'logs' , state.get('logs').push(Map(\\n        { \\n            type : action.payload.type,\\n            username : action.payload.username,\\n            data : action.payload.data\\n        }\\n    ))),\\n  }, \\n  initialState\\n);\",\"import React, { Component } from 'react';\\nimport PropTypes from 'prop-types';\\nimport LoginWrap from '../components/LoginWrap';\\nimport { actionCreators } from '../store/modules/users';\\nimport { actionCreators as chatActionCreators } from '../store/modules/chat';\\nimport { connect } from 'react-redux';\\nimport { bindActionCreators } from 'redux';\\n\\n\\nclass LoginWrapContainer extends Component {\\n  \\n    set_user = (event) => {\\n        const { UserActions, ChatActions, socket } = this.props;\\n        let usernameInputValue = event.target.value;\\n        if( event.which === 13 && usernameInputValue ){\\n            socket.emit('add user', usernameInputValue);\\n            UserActions.set_user(usernameInputValue);\\n            UserActions.set_login();\\n            ChatActions.add_chat({\\n                type : \\\"log\\\",\\n                username : usernameInputValue,\\n                data : `당신의 닉네임 : ${usernameInputValue}`\\n            });\\n        }\\n    }\\n\\n\\n    render() {\\n        return (\\n        <LoginWrap\\n            set_user={this.set_user}\\n            status = {this.props.status}\\n        />\\n        );\\n    }\\n}\\n\\nLoginWrapContainer.propTypes = {\\n    socket: PropTypes.object.isRequired\\n};\\n\\nexport default connect(\\n    (state) => ({\\n        username: state.users.get('username'),\\n        status: state.users.get('status'),\\n    }),\\n    (dispatch) => ({\\n        UserActions : bindActionCreators(actionCreators, dispatch),\\n        ChatActions : bindActionCreators(chatActionCreators, dispatch)\\n    })\\n)(LoginWrapContainer);\",\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nconst MessageBody = ({username, message}) => {\\n    return (\\n        <div>\\n            <span className=\\\"username\\\">{username}</span>\\n            <span className=\\\"messageBody\\\">{message}</span>\\n        </div>\\n    );\\n}\\n\\nMessageBody.propTypes = {\\n    username: PropTypes.string.isRequired,\\n    message: PropTypes.string.isRequired\\n};\\n\\nexport default MessageBody;\",\"import React from 'react';\\nimport MessageBody from '../components/MessageBody';\\nimport PropTypes from 'prop-types';\\n\\nconst Messages = ({logs}) => {\\n    return (\\n        <ul className=\\\"messages\\\">\\n            {logs.map( (log, key)=>{  \\n                return ( \\n                    <li className={log.type} key={key} style={{ \\\"display\\\": \\\"list-item\\\" }}>\\n                        { log.type ===\\\"log\\\" ? log.data : \\n                            <MessageBody\\n                            username = {log.username} \\n                            message = {log.data}\\n                            />  \\n                        }\\n                    </li>\\n                )\\n            })}\\n        </ul>\\n    );\\n}\\n\\nMessages.propTypes = {\\n    logs: PropTypes.array.isRequired\\n};\\n\\nexport default Messages;\",\"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nconst InputBox = ({add_chat}) => {\\n    return (\\n        <input className=\\\"inputMessage\\\" \\n            placeholder=\\\"Type here...\\\" \\n            onKeyPress={add_chat} />\\n    );\\n}\\n\\nInputBox.propTypes = {\\n    add_chat: PropTypes.func.isRequired\\n};\\n\\nexport default InputBox;\",\"import React, { Component } from 'react';\\nimport PropTypes from 'prop-types';\\nimport { actionCreators } from '../store/modules/chat';\\nimport { connect } from 'react-redux';\\nimport { bindActionCreators } from 'redux';\\nimport Messages from '../components/Messages';\\nimport InputBox from '../components/InputBox';\\n\\nclass ChatWrapContainer extends Component {\\n\\n    componentDidMount() {\\n        const { ChatActions, socket } = this.props;\\n\\n        socket.on('user joined', (data)=>{\\n            ChatActions.add_chat({\\n                type : \\\"log\\\",\\n                username : \\\"notice\\\",\\n                data : `${data.username}님이 접속하였습니다.`\\n            });\\n        });\\n\\n        socket.on('new message', (data)=>{\\n            ChatActions.add_chat({\\n                type : \\\"message\\\",\\n                username : data.username,\\n                data : data.message\\n            });\\n        });\\n\\n        socket.on('login', (data)=>{\\n            ChatActions.add_chat({\\n                type : \\\"log\\\",\\n                username : \\\"notice\\\",\\n                data : `현재인원 ( ${data.numUsers} )`\\n            });\\n        });\\n\\n        socket.on('user left', (data)=>{\\n            ChatActions.add_chat({\\n                type : \\\"log\\\",\\n                username : data.username,\\n                data : `${data.username}님이 접속을 종료하였습니다.\\n                    현재인원 ( ${data.numUsers} )`\\n            });\\n        });\\n\\n        \\n    }\\n\\n    add_chat = (event) => {\\n        const { ChatActions, socket, username } = this.props;\\n        let inputMessage = event.target.value;\\n        if( event.which === 13 && inputMessage ){\\n            socket.emit('new message', inputMessage);\\n            ChatActions.add_chat({\\n                type : \\\"message\\\",\\n                username : username,\\n                data : inputMessage\\n            });\\n            event.target.value = \\\"\\\";\\n        }\\n    }\\n\\n    render() {\\n        const display = this.props.status ? \\\"block\\\" : \\\"none\\\"; \\n        return (\\n            <li className=\\\"chat page\\\" style={{ \\\"display\\\" : display }}>\\n                <div className=\\\"chatArea\\\">\\n                    <Messages logs={this.props.logs}/>\\n                </div>\\n                <InputBox add_chat={this.add_chat}/>\\n            </li>\\n        );\\n    }\\n}\\n\\nChatWrapContainer.propTypes = {\\n    socket: PropTypes.object.isRequired\\n};\\n\\nexport default connect(\\n    (state) => ({\\n        username: state.users.get('username'),\\n        status: state.users.get('status'),\\n        logs: state.chat.get('logs').toJS()\\n    }),\\n    (dispatch) => ({\\n        ChatActions : bindActionCreators(actionCreators, dispatch)\\n    })\\n)(ChatWrapContainer);\",\"import React, { Component } from 'react';\\nimport LoginWrapContainer from './containers/LoginWrapContainer';\\nimport ChatWrapContainer from './containers/ChatWrapContainer';\\nimport io from 'socket.io-client';\\nconst socket = io('http://13.124.223.234:3000');\\n\\nclass App extends Component {\\n  render() {\\n    return (\\n      <ul className=\\\"pages\\\">\\n        <ChatWrapContainer socket={ socket } />\\n        <LoginWrapContainer socket={ socket } />\\n      </ul>\\n    );\\n  }\\n}\\n\\nexport default App;\\n\",\"import { combineReducers } from 'redux';\\nimport users from '../../store/modules/users';\\nimport chat from '../../store/modules/chat';\\n\\nexport default combineReducers({\\n    users,\\n    chat\\n});\\n\",\"import { createStore, applyMiddleware, compose } from 'redux';\\nimport modules from '../store/modules';\\nimport ReduxThunk from 'redux-thunk';\\nimport { createLogger } from 'redux-logger';\\n\\nconst logger = createLogger(); \\n\\nexport default function configureStore() {\\n  const store = createStore(\\n    modules, /* preloadedState, */\\n    compose(\\n      applyMiddleware(\\n        ReduxThunk,\\n        logger\\n      ),\\n      // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\\n    )\\n   );\\n  return store;\\n}\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport App from './App';\\nimport { Provider } from 'react-redux';\\nimport configureStore from './store/configureStore';\\nimport * as serviceWorker from './serviceWorker';\\nimport './index.css';\\n\\nconst store = configureStore();\\n\\nReactDOM.render(\\n    <Provider store={store}>\\n        <App />\\n    </Provider>\\n, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{48:function(e,t,a){e.exports=a(83)},74:function(e,t){},81:function(e,t,a){},83:function(e,t,a){\"use strict\";a.r(t);var n,s=a(0),r=a.n(s),c=a(42),o=a.n(c),u=a(8),i=a(9),l=a(12),m=a(10),d=a(13),p=function(e){var t=e.set_user,a=e.status?\"none\":\"block\";return r.a.createElement(\"li\",{className:\"login page\",style:{display:a}},r.a.createElement(\"div\",{className:\"form\"},r.a.createElement(\"h3\",{className:\"title\"},\"\\ub2c9\\ub124\\uc784\\uc744 \\uc785\\ub825\\ud558\\uc138\\uc694.\"),r.a.createElement(\"input\",{className:\"usernameInput\",onKeyPress:t,type:\"text\",maxLength:\"14\"})))},h=a(17),b=a(85),g=a(84),f=a(14),O=a(43),j=a.n(O),y=a(20),v=a.n(y);j.a.config();var E=v()(\"http://13.124.223.234:3000\"),_={set_login:Object(b.a)(\"users/SET_LOGIN\"),set_user:Object(b.a)(\"users/SET_USER\"),set_userAsync:function(e){return function(t){E.emit(\"add user\",e),t(_.set_user())}}},w=Object(f.b)({status:!1,username:\"\"}),k=Object(g.a)((n={},Object(h.a)(n,\"users/SET_USER\",function(e,t){return e.set(\"username\",t.payload)}),Object(h.a)(n,\"users/SET_LOGIN\",function(e){return e.set(\"status\",!0)}),n),w),A={add_chat:Object(b.a)(\"chat/ADD_CHAT\")},N=Object(f.b)({logs:Object(f.a)([])}),C=Object(g.a)(Object(h.a)({},\"chat/ADD_CHAT\",function(e,t){return e.set(\"logs\",e.get(\"logs\").push(Object(f.b)({type:t.payload.type,username:t.payload.username,data:t.payload.data})))}),N),S=a(11),T=a(1),U=function(e){function t(){var e,a;Object(u.a)(this,t);for(var n=arguments.length,s=new Array(n),r=0;r<n;r++)s[r]=arguments[r];return(a=Object(l.a)(this,(e=Object(m.a)(t)).call.apply(e,[this].concat(s)))).set_user=function(e){var t=a.props,n=t.UserActions,s=t.ChatActions,r=t.socket,c=e.target.value;13===e.which&&c&&(r.emit(\"add user\",c),n.set_user(c),n.set_login(),s.add_chat({type:\"log\",username:c,data:\"\\ub2f9\\uc2e0\\uc758 \\ub2c9\\ub124\\uc784 : \".concat(c)}))},a}return Object(d.a)(t,e),Object(i.a)(t,[{key:\"render\",value:function(){return r.a.createElement(p,{set_user:this.set_user,status:this.props.status})}}]),t}(s.Component),D=Object(S.b)(function(e){return{username:e.users.get(\"username\"),status:e.users.get(\"status\")}},function(e){return{UserActions:Object(T.b)(_,e),ChatActions:Object(T.b)(A,e)}})(U),I=function(e){var t=e.username,a=e.message;return r.a.createElement(\"div\",null,r.a.createElement(\"span\",{className:\"username\"},t),r.a.createElement(\"span\",{className:\"messageBody\"},a))},L=function(e){var t=e.logs;return r.a.createElement(\"ul\",{className:\"messages\"},t.map(function(e,t){return r.a.createElement(\"li\",{className:e.type,key:t,style:{display:\"list-item\"}},\"log\"===e.type?e.data:r.a.createElement(I,{username:e.username,message:e.data}))}))},x=function(e){var t=e.add_chat;return r.a.createElement(\"input\",{className:\"inputMessage\",placeholder:\"Type here...\",onKeyPress:t})},B=function(e){function t(){var e,a;Object(u.a)(this,t);for(var n=arguments.length,s=new Array(n),r=0;r<n;r++)s[r]=arguments[r];return(a=Object(l.a)(this,(e=Object(m.a)(t)).call.apply(e,[this].concat(s)))).add_chat=function(e){var t=a.props,n=t.ChatActions,s=t.socket,r=t.username,c=e.target.value;13===e.which&&c&&(s.emit(\"new message\",c),n.add_chat({type:\"message\",username:r,data:c}),e.target.value=\"\")},a}return Object(d.a)(t,e),Object(i.a)(t,[{key:\"componentDidMount\",value:function(){var e=this.props,t=e.ChatActions,a=e.socket;a.on(\"user joined\",function(e){t.add_chat({type:\"log\",username:\"notice\",data:\"\".concat(e.username,\"\\ub2d8\\uc774 \\uc811\\uc18d\\ud558\\uc600\\uc2b5\\ub2c8\\ub2e4.\")})}),a.on(\"new message\",function(e){t.add_chat({type:\"message\",username:e.username,data:e.message})}),a.on(\"login\",function(e){t.add_chat({type:\"log\",username:\"notice\",data:\"\\ud604\\uc7ac\\uc778\\uc6d0 ( \".concat(e.numUsers,\" )\")})}),a.on(\"user left\",function(e){t.add_chat({type:\"log\",username:e.username,data:\"\".concat(e.username,\"\\ub2d8\\uc774 \\uc811\\uc18d\\uc744 \\uc885\\ub8cc\\ud558\\uc600\\uc2b5\\ub2c8\\ub2e4.\\n                    \\ud604\\uc7ac\\uc778\\uc6d0 ( \").concat(e.numUsers,\" )\")})})}},{key:\"render\",value:function(){var e=this.props.status?\"block\":\"none\";return r.a.createElement(\"li\",{className:\"chat page\",style:{display:e}},r.a.createElement(\"div\",{className:\"chatArea\"},r.a.createElement(L,{logs:this.props.logs})),r.a.createElement(x,{add_chat:this.add_chat}))}}]),t}(s.Component),J=Object(S.b)(function(e){return{username:e.users.get(\"username\"),status:e.users.get(\"status\"),logs:e.chat.get(\"logs\").toJS()}},function(e){return{ChatActions:Object(T.b)(A,e)}})(B),G=v()(\"http://13.124.223.234:3000\"),H=function(e){function t(){return Object(u.a)(this,t),Object(l.a)(this,Object(m.a)(t).apply(this,arguments))}return Object(d.a)(t,e),Object(i.a)(t,[{key:\"render\",value:function(){return r.a.createElement(\"ul\",{className:\"pages\"},r.a.createElement(J,{socket:G}),r.a.createElement(D,{socket:G}))}}]),t}(s.Component),K=Object(T.c)({users:k,chat:C}),M=a(45),P=a(46),R=Object(P.createLogger)();Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));a(81);var W=Object(T.e)(K,Object(T.d)(Object(T.a)(M.a,R)));o.a.render(r.a.createElement(S.a,{store:W},r.a.createElement(H,null)),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[48,2,1]]]);","extractedComments":[]}